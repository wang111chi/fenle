#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess

import click

api_root_path = os.path.split(os.path.split(os.path.realpath(__file__))[0])[0]


@click.group()
def cli():
    pass


@cli.group(invoke_without_command=True)
@click.option('--build', is_flag=True)
@click.pass_context
def server(ctx, build):
    os.chdir(os.path.join(api_root_path, 'docker', 'development'))
    os.environ['COMPOSE_PROJECT_NAME'] = 'fenle_api_server'

    if ctx.invoked_subcommand is not None:
        return

    if build:
        subprocess.call("docker-compose build api", shell=True)

    subprocess.call("docker-compose up -d", shell=True)
    click.echo()
    click.echo("server started! you can go to http://localhost:3032")


@server.command('compose', context_settings=dict(
    ignore_unknown_options=True,
))
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def server_compose(args):
    cmdline = ['docker-compose'] + list(args)
    subprocess.call(cmdline)


@server.command('build')
def server_build():
    subprocess.call("docker-compose build api", shell=True)


@server.command('stop')
def server_stop():
    subprocess.call("docker-compose stop", shell=True)


@cli.group(invoke_without_command=True)
@click.option('--build', is_flag=True)
@click.pass_context
def test(ctx, build):
    os.chdir(os.path.join(api_root_path, 'docker', 'test'))
    os.environ['COMPOSE_PROJECT_NAME'] = 'fenle_api_test'

    if ctx.invoked_subcommand is not None:
        return

    if build:
        subprocess.call("docker-compose build test", shell=True)

    subprocess.call("docker-compose run test", shell=True)


@test.command('compose', context_settings=dict(
    ignore_unknown_options=True,
))
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def test_compose(args):
    cmdline = ['docker-compose'] + list(args)
    subprocess.call(cmdline)


@test.command('build')
def test_build():
    subprocess.call("docker-compose build test", shell=True)


if __name__ == '__main__':
    cli()
