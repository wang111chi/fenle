#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess

import click

root_path = os.path.split(os.path.split(os.path.realpath(__file__))[0])[0]


@click.group()
def cli():
    pass


@cli.group(invoke_without_command=True)
@click.option('--build', '-b', is_flag=True, help='build before testing')
@click.pass_context
def test(ctx, build):
    u"""commands related to testing"""

    os.chdir(os.path.join(root_path, 'tests', 'docker'))
    os.environ['COMPOSE_PROJECT_NAME'] = 'fenle_test'

    if ctx.invoked_subcommand is not None:
        return

    if build:
        subprocess.call("docker-compose build test", shell=True)

    subprocess.call("docker-compose run test", shell=True)


@test.command('compose', context_settings=dict(
    ignore_unknown_options=True,
))
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def test_compose(args):
    u"""a wrapper to docker-compose for testing"""

    cmdline = ['docker-compose'] + list(args)
    subprocess.call(cmdline)


@test.command('mysql')
def test_mysql():
    u"""mysql console for testing"""

    subprocess.call("docker-compose exec mysql mysql "
                    "-uroot -p123456 fenle_fenqi_db", shell=True)


if __name__ == '__main__':
    cli()
